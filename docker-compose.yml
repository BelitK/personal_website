services:
  api:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    image: fastapi
    restart: always
    ports:
      - 1000:1000
    networks:
      - backnet
      - frontnet
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:1000 || exit 1"]
      interval: 3m
      timeout: 30s
      retries: 5
      start_period: 45s
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: frontend
    restart: always
    ports:
      - 3000:3000
    networks:
      - frontnet
    depends_on:
      - api
  proxy:
    image: nginx:latest
    restart: always
    ports:
      - 80:80
      - 443:443
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 3m
      timeout: 30s
      retries: 5
      start_period: 30s
    volumes:
      - ./nginx/conf/:/etc/nginx/conf.d/:ro
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro
    depends_on:
      - api
    networks:
      - backnet
      - frontnet
  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
  streamlit:
    build:
      context: ./streamlit
      dockerfile: Dockerfile
    image: streamlit
    restart: always
    ports:
      - 4000:4000
    networks:
      - frontnet
      - backnet
    depends_on:
      - api
  # reverse-proxy:
  #   # The official v2 Traefik docker image
  #   image: traefik:v2.10
  #   # Enables the web UI and tells Traefik to listen to docker
  #   command: --api.insecure=true --providers.docker
  #   ports:
  #     # The HTTP port
  #     - "80:80"
  #     # The Web UI (enabled by --api.insecure=true)
  #     - "8080:8080"
  #   volumes:
  #     # So that Traefik can listen to the Docker events
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   networks:
  #     - backnet
  #     - frontnet
networks:
  backnet:
  frontnet:
